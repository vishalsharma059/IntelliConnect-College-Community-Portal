{"ast":null,"code":"// import \"./messenger.css\";\n// import Topbar from \"../../components/topbar/Topbar\";\n// import Conversation from \"../../components/conversation/Conversation\";\n// import Message from \"../../components/message/Message\";\n// import ChatOnline from \"../../components/chatOnline/ChatOnline\";\n// import { useContext, useEffect, useState } from \"react\";\n// import { AuthContext } from \"../../context/AuthContext\";\n// import axios from \"axios\";\n\n// export default function Messenger() {\n//   const [conversations, setConversations] = useState([]);\n//   const [currentChat, setCurrentChat] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState(\"\");\n\n//   const { user } = useContext(AuthContext);\n\n//   useEffect(() => {\n//     const getConversations = async () => {\n//       try {\n//         const res = await axios.get(\"/conversations/\" + user._id);\n//         setConversations(res.data);\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     };\n//     getConversations();\n//   }, [user._id]);\n\n//   useEffect(() => {\n//     const getMessage = async () => {\n//       try {\n//         const res = await axios.get(\"/messages/\" + currentChat?._id);\n//         setMessages(res.data);\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     };\n//     getMessage();\n//   }, [currentChat]);\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         const message = {\n//             sender: user._id,\n//             text: newMessage,\n//             conversationId: currentChat._id,\n//         };\n//         try {\n//             const res = await axios.post(\"/messages\", message);\n//             setMessages([...messages, res.data]);\n//             setNewMessage(\"\")\n//         } catch (err) {\n//             console.log(err);\n\n//         }\n//     }\n\n//   return (\n//     <>\n//       <Topbar />\n//       <div className=\"messenger\">\n//         <div className=\"chatMenu\">\n//           <div className=\"chatMenuWrapper\">\n//             <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\n//             {conversations &&\n//               conversations.map((c) => (\n//                 <div onClick={() => setCurrentChat(c)}>\n//                   <Conversation\n//                     key={c._id}\n//                     conversation={c}\n//                     currentUser={user}\n//                   />\n//                 </div>\n//               ))}\n//           </div>\n//         </div>\n//         <div className=\"chatBox\">\n//           <div className=\"chatBoxWrapper\">\n//             {currentChat ? (\n//               <>\n//                 <div className=\"chatBoxTop\">\n//                   {messages.map((m) => (\n//                     <Message message={m} own={m.sender === user._id} />\n//                   ))}\n//                 </div>\n\n//                 <div className=\"chatBoxBottom\">\n//                   <textarea\n//                     className=\"chatMessageInput\"\n//                     placeholder=\"write something...\"\n//                     onChange={(e) => setNewMessage(e.target.value)}\n//                     value={newMessage}\n//                   ></textarea>\n//                   <button className=\"chatSubmitButton\" onClick={handleSubmit}>Send</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <span className=\"noConversationText\">\n//                 Open a converation to start a chat.\n//               </span>\n//             )}\n//           </div>\n//         </div>\n\n//         <div className=\"chatOnline\">\n//           <div className=\"chatOnlineWrapper\">\n//             <ChatOnline />\n//             <ChatOnline />\n//             <ChatOnline />\n//             <ChatOnline />\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// import \"./messenger.css\";\n// import Topbar from \"../../components/topbar/Topbar\";\n// import Conversation from \"../../components/conversation/Conversation\";\n// import Message from \"../../components/message/Message\";\n// import ChatOnline from \"../../components/chatOnline/ChatOnline\";\n// import { useContext, useEffect, useRef, useState } from \"react\";\n// import { AuthContext } from \"../../context/AuthContext\";\n// import axios from \"axios\";\n// import {io} from \"socket.io-client\"\n\n// export default function Messenger() {\n//   const [conversations, setConversations] = useState([]);\n//   const [currentChat, setCurrentChat] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState(\"\");\n//   const [arrivalMessage, setArrivalMessage] = useState(null);\n//   const [onlineUsers, setOnlineUsers] = useState([]);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const socket = useRef();\n//     const scrollRef = useRef(null);\n//     const { user } = useContext(AuthContext);\n\n//         // Establish the socket connection\n//         useEffect(() => {\n//             socket.current = io(\"ws://localhost:8900\");\n//             socket.current.on(\"getMessage\", data => {\n//                 setArrivalMessage({\n//                     sender: data.senderId,\n//                     text: data.text,\n//                     createdAt: Date.now(),\n\n//                 });\n//             });\n//             return () => {\n//                 socket.current.disconnect(); // Disconnect socket on component unmount\n//             };\n//         }, []);\n\n//     useEffect(() => {\n//         arrivalMessage && currentChat?.members.includes(arrivalMessage.sender) && setMessages((prev) => [...prev, arrivalMessage])\n//     }, [arrivalMessage, currentChat]);\n\n//         // Handle socket events\n//         useEffect(() => {\n//             const handleGetUsers = (users) => {\n//                 // console.log(users); // Logs the updated list of users\n//                 setOnlineUsers(user.following.filter(f=>users.some((u)=> u.userId === f)));\n//             };\n\n//             socket.current.emit(\"addUser\", user._id);\n//             socket.current.on(\"getUsers\", handleGetUsers);\n\n//             // Cleanup to avoid duplicate event listeners\n//             return () => {\n//                 socket.current.off(\"getUsers\", handleGetUsers);\n//             };\n//         }, [user._id]);\n\n//     // useEffect(() => {\n//     //     socket.current = io(\"ws://localhost:8900\");\n//     // }, []);\n\n//     // useEffect(() => {\n//     //     socket.current.emit(\"addUser\", user._id);\n//     //     socket.current.on(\"getUsers\", users => {\n//     //         setOnlineUsers(user.following.filter(f => users.some((u) => u.userId === f)));\n\n//     //     });\n//     // }, [user]);\n\n//   // Fetch conversations\n//   useEffect(() => {\n//     const getConversations = async () => {\n//       try {\n//         const res = await axios.get(\"/conversations/\" + user._id);\n//         setConversations(res.data);\n//       } catch (err) {\n//         console.error(\"Error fetching conversations:\", err);\n//       }\n//     };\n//     getConversations();\n//   }, [user._id]);\n\n//   // Fetch messages\n//   useEffect(() => {\n//     const getMessage = async () => {\n//       try {\n//         const res = await axios.get(\"/messages/\" + currentChat?._id);\n//         setMessages(res.data);\n//       } catch (err) {\n//         console.error(\"Error fetching messages:\", err);\n//       }\n//     };\n//     getMessage();\n//   }, [currentChat]);\n\n//   // Handle message submission\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!newMessage.trim()) return; // Prevent empty submissions\n\n//     const message = {\n//       sender: user._id,\n//       text: newMessage,\n//       conversationId: currentChat._id,\n//     };\n\n//       setIsLoading(true); // Start loading\n\n//       const receiverId = currentChat.members.find(member=> member !== user._id)\n\n//       socket.current.emit(\"sendMessage\", {\n//           senderId: user._id,\n//           receiverId,\n//           text: newMessage,\n//       })\n\n//     try {\n//       const res = await axios.post(\"/messages\", message);\n//       setMessages([...messages, res.data]);\n//       setNewMessage(\"\"); // Clear textarea\n//     } catch (err) {\n//       console.error(\"Error sending message:\", err);\n//       alert(\"Failed to send message. Please try again.\");\n//     } finally {\n//       setIsLoading(false); // Stop loading\n//     }\n//     };\n\n//     useEffect(() => {\n//         scrollRef.current?.scrollIntoView({behavior: \"smooth\"})\n//     }, [messages])\n\n//   return (\n//     <>\n//       <Topbar />\n//       <div className=\"messenger\">\n//         <div className=\"chatMenu\">\n//           <div className=\"chatMenuWrapper\">\n//             <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\n//             {conversations &&\n//               conversations.map((c) => (\n//                 <div onClick={() => setCurrentChat(c)} key={c._id}>\n//                   <Conversation conversation={c} currentUser={user} />\n//                 </div>\n//               ))}\n//           </div>\n//         </div>\n//         <div className=\"chatBox\">\n//           <div className=\"chatBoxWrapper\">\n//             {currentChat ? (\n//               <>\n//                 <div className=\"chatBoxTop\">\n//                                   {messages.map((m, index) => (\n//                       <div ref= {scrollRef}>                \n//                     <Message key={index} message={m} own={m.sender === user._id} />\n//                       </div>\n//                   ))}\n//                 </div>\n\n//                 <div className=\"chatBoxBottom\">\n//                   <textarea\n//                     className=\"chatMessageInput\"\n//                     placeholder=\"write something...\"\n//                     onChange={(e) => setNewMessage(e.target.value)}\n//                     value={newMessage}\n//                     disabled={isLoading} // Disable while loading\n//                   ></textarea>\n//                   <button\n//                     className=\"chatSubmitButton\"\n//                     onClick={handleSubmit}\n//                     disabled={isLoading} // Disable while loading\n//                   >\n//                     {isLoading ? \"Sending...\" : \"Send\"}\n//                   </button>\n//                 </div>\n//               </>\n//             ) : (\n//               <span className=\"noConversationText\">\n//                 Open a conversation to start a chat.\n//               </span>\n//             )}\n//           </div>\n//         </div>\n\n//         <div className=\"chatOnline\">\n//           <div className=\"chatOnlineWrapper\">\n//                       <ChatOnline onlineUsers={onlineUsers } currentId = {user._id} setCurrentChat = {setCurrentChat} />\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/IntelliConnect/client/src/pages/messenger/Messenger.jsx"],"sourcesContent":["// import \"./messenger.css\";\r\n// import Topbar from \"../../components/topbar/Topbar\";\r\n// import Conversation from \"../../components/conversation/Conversation\";\r\n// import Message from \"../../components/message/Message\";\r\n// import ChatOnline from \"../../components/chatOnline/ChatOnline\";\r\n// import { useContext, useEffect, useState } from \"react\";\r\n// import { AuthContext } from \"../../context/AuthContext\";\r\n// import axios from \"axios\";\r\n\r\n// export default function Messenger() {\r\n//   const [conversations, setConversations] = useState([]);\r\n//   const [currentChat, setCurrentChat] = useState(null);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n//   const { user } = useContext(AuthContext);\r\n\r\n//   useEffect(() => {\r\n//     const getConversations = async () => {\r\n//       try {\r\n//         const res = await axios.get(\"/conversations/\" + user._id);\r\n//         setConversations(res.data);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//       }\r\n//     };\r\n//     getConversations();\r\n//   }, [user._id]);\r\n\r\n//   useEffect(() => {\r\n//     const getMessage = async () => {\r\n//       try {\r\n//         const res = await axios.get(\"/messages/\" + currentChat?._id);\r\n//         setMessages(res.data);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//       }\r\n//     };\r\n//     getMessage();\r\n//   }, [currentChat]);\r\n    \r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         const message = {\r\n//             sender: user._id,\r\n//             text: newMessage,\r\n//             conversationId: currentChat._id,\r\n//         };\r\n//         try {\r\n//             const res = await axios.post(\"/messages\", message);\r\n//             setMessages([...messages, res.data]);\r\n//             setNewMessage(\"\")\r\n//         } catch (err) {\r\n//             console.log(err);\r\n            \r\n//         }\r\n//     }\r\n\r\n//   return (\r\n//     <>\r\n//       <Topbar />\r\n//       <div className=\"messenger\">\r\n//         <div className=\"chatMenu\">\r\n//           <div className=\"chatMenuWrapper\">\r\n//             <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\r\n//             {conversations &&\r\n//               conversations.map((c) => (\r\n//                 <div onClick={() => setCurrentChat(c)}>\r\n//                   <Conversation\r\n//                     key={c._id}\r\n//                     conversation={c}\r\n//                     currentUser={user}\r\n//                   />\r\n//                 </div>\r\n//               ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"chatBox\">\r\n//           <div className=\"chatBoxWrapper\">\r\n//             {currentChat ? (\r\n//               <>\r\n//                 <div className=\"chatBoxTop\">\r\n//                   {messages.map((m) => (\r\n//                     <Message message={m} own={m.sender === user._id} />\r\n//                   ))}\r\n//                 </div>\r\n\r\n//                 <div className=\"chatBoxBottom\">\r\n//                   <textarea\r\n//                     className=\"chatMessageInput\"\r\n//                     placeholder=\"write something...\"\r\n//                     onChange={(e) => setNewMessage(e.target.value)}\r\n//                     value={newMessage}\r\n//                   ></textarea>\r\n//                   <button className=\"chatSubmitButton\" onClick={handleSubmit}>Send</button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <span className=\"noConversationText\">\r\n//                 Open a converation to start a chat.\r\n//               </span>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"chatOnline\">\r\n//           <div className=\"chatOnlineWrapper\">\r\n//             <ChatOnline />\r\n//             <ChatOnline />\r\n//             <ChatOnline />\r\n//             <ChatOnline />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// import \"./messenger.css\";\r\n// import Topbar from \"../../components/topbar/Topbar\";\r\n// import Conversation from \"../../components/conversation/Conversation\";\r\n// import Message from \"../../components/message/Message\";\r\n// import ChatOnline from \"../../components/chatOnline/ChatOnline\";\r\n// import { useContext, useEffect, useRef, useState } from \"react\";\r\n// import { AuthContext } from \"../../context/AuthContext\";\r\n// import axios from \"axios\";\r\n// import {io} from \"socket.io-client\"\r\n\r\n// export default function Messenger() {\r\n//   const [conversations, setConversations] = useState([]);\r\n//   const [currentChat, setCurrentChat] = useState(null);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState(\"\");\r\n//   const [arrivalMessage, setArrivalMessage] = useState(null);\r\n//   const [onlineUsers, setOnlineUsers] = useState([]);\r\n//     const [isLoading, setIsLoading] = useState(false);\r\n//     const socket = useRef();\r\n//     const scrollRef = useRef(null);\r\n//     const { user } = useContext(AuthContext);\r\n    \r\n//         // Establish the socket connection\r\n//         useEffect(() => {\r\n//             socket.current = io(\"ws://localhost:8900\");\r\n//             socket.current.on(\"getMessage\", data => {\r\n//                 setArrivalMessage({\r\n//                     sender: data.senderId,\r\n//                     text: data.text,\r\n//                     createdAt: Date.now(),\r\n                    \r\n//                 });\r\n//             });\r\n//             return () => {\r\n//                 socket.current.disconnect(); // Disconnect socket on component unmount\r\n//             };\r\n//         }, []);\r\n    \r\n//     useEffect(() => {\r\n//         arrivalMessage && currentChat?.members.includes(arrivalMessage.sender) && setMessages((prev) => [...prev, arrivalMessage])\r\n//     }, [arrivalMessage, currentChat]);\r\n    \r\n//         // Handle socket events\r\n//         useEffect(() => {\r\n//             const handleGetUsers = (users) => {\r\n//                 // console.log(users); // Logs the updated list of users\r\n//                 setOnlineUsers(user.following.filter(f=>users.some((u)=> u.userId === f)));\r\n//             };\r\n    \r\n//             socket.current.emit(\"addUser\", user._id);\r\n//             socket.current.on(\"getUsers\", handleGetUsers);\r\n    \r\n//             // Cleanup to avoid duplicate event listeners\r\n//             return () => {\r\n//                 socket.current.off(\"getUsers\", handleGetUsers);\r\n//             };\r\n//         }, [user._id]);\r\n\r\n//     // useEffect(() => {\r\n//     //     socket.current = io(\"ws://localhost:8900\");\r\n//     // }, []);\r\n    \r\n//     // useEffect(() => {\r\n//     //     socket.current.emit(\"addUser\", user._id);\r\n//     //     socket.current.on(\"getUsers\", users => {\r\n//     //         setOnlineUsers(user.following.filter(f => users.some((u) => u.userId === f)));\r\n            \r\n//     //     });\r\n//     // }, [user]);\r\n    \r\n    \r\n\r\n//   // Fetch conversations\r\n//   useEffect(() => {\r\n//     const getConversations = async () => {\r\n//       try {\r\n//         const res = await axios.get(\"/conversations/\" + user._id);\r\n//         setConversations(res.data);\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching conversations:\", err);\r\n//       }\r\n//     };\r\n//     getConversations();\r\n//   }, [user._id]);\r\n\r\n//   // Fetch messages\r\n//   useEffect(() => {\r\n//     const getMessage = async () => {\r\n//       try {\r\n//         const res = await axios.get(\"/messages/\" + currentChat?._id);\r\n//         setMessages(res.data);\r\n//       } catch (err) {\r\n//         console.error(\"Error fetching messages:\", err);\r\n//       }\r\n//     };\r\n//     getMessage();\r\n//   }, [currentChat]);\r\n\r\n//   // Handle message submission\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!newMessage.trim()) return; // Prevent empty submissions\r\n\r\n//     const message = {\r\n//       sender: user._id,\r\n//       text: newMessage,\r\n//       conversationId: currentChat._id,\r\n//     };\r\n\r\n//       setIsLoading(true); // Start loading\r\n\r\n//       const receiverId = currentChat.members.find(member=> member !== user._id)\r\n      \r\n//       socket.current.emit(\"sendMessage\", {\r\n//           senderId: user._id,\r\n//           receiverId,\r\n//           text: newMessage,\r\n//       })\r\n\r\n//     try {\r\n//       const res = await axios.post(\"/messages\", message);\r\n//       setMessages([...messages, res.data]);\r\n//       setNewMessage(\"\"); // Clear textarea\r\n//     } catch (err) {\r\n//       console.error(\"Error sending message:\", err);\r\n//       alert(\"Failed to send message. Please try again.\");\r\n//     } finally {\r\n//       setIsLoading(false); // Stop loading\r\n//     }\r\n//     };\r\n    \r\n//     useEffect(() => {\r\n//         scrollRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n//     }, [messages])\r\n    \r\n\r\n\r\n//   return (\r\n//     <>\r\n//       <Topbar />\r\n//       <div className=\"messenger\">\r\n//         <div className=\"chatMenu\">\r\n//           <div className=\"chatMenuWrapper\">\r\n//             <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\r\n//             {conversations &&\r\n//               conversations.map((c) => (\r\n//                 <div onClick={() => setCurrentChat(c)} key={c._id}>\r\n//                   <Conversation conversation={c} currentUser={user} />\r\n//                 </div>\r\n//               ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"chatBox\">\r\n//           <div className=\"chatBoxWrapper\">\r\n//             {currentChat ? (\r\n//               <>\r\n//                 <div className=\"chatBoxTop\">\r\n//                                   {messages.map((m, index) => (\r\n//                       <div ref= {scrollRef}>                \r\n//                     <Message key={index} message={m} own={m.sender === user._id} />\r\n//                       </div>\r\n//                   ))}\r\n//                 </div>\r\n\r\n//                 <div className=\"chatBoxBottom\">\r\n//                   <textarea\r\n//                     className=\"chatMessageInput\"\r\n//                     placeholder=\"write something...\"\r\n//                     onChange={(e) => setNewMessage(e.target.value)}\r\n//                     value={newMessage}\r\n//                     disabled={isLoading} // Disable while loading\r\n//                   ></textarea>\r\n//                   <button\r\n//                     className=\"chatSubmitButton\"\r\n//                     onClick={handleSubmit}\r\n//                     disabled={isLoading} // Disable while loading\r\n//                   >\r\n//                     {isLoading ? \"Sending...\" : \"Send\"}\r\n//                   </button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <span className=\"noConversationText\">\r\n//                 Open a conversation to start a chat.\r\n//               </span>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"chatOnline\">\r\n//           <div className=\"chatOnlineWrapper\">\r\n//                       <ChatOnline onlineUsers={onlineUsers } currentId = {user._id} setCurrentChat = {setCurrentChat} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}