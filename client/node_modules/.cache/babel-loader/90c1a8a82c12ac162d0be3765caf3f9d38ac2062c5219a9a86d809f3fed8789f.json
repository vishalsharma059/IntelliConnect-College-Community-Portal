{"ast":null,"code":"var _jsxFileName = \"D:\\\\IntelliConnect\\\\client\\\\src\\\\pages\\\\chatBot\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n// import \"./chatBot.css\";\n// import Topbar from \"../../components/topbar/Topbar\";\n\n// const API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\n\n// export default function ChatBot() {\n//   const [messages, setMessages] = useState([\n//     {\n//       message: \"Hello, I'm IntelliConnect! Ask me anything!\",\n//       sentTime: \"just now\",\n//       sender: \"Gemini\"\n//     }\n//   ]);\n//   const [isTyping, setIsTyping] = useState(false);\n\n//   const handleSend = async (message) => {\n//     const newMessage = {\n//       message,\n//       direction: 'outgoing',\n//       sender: \"user\"\n//     };\n\n//     setMessages([...messages, newMessage]);\n//     setIsTyping(true);\n//     await processMessageToGemini(message);\n//   };\n\n//   async function processMessageToGemini(message) {\n//     const apiRequestBody = {\n//       contents: [{ parts: [{ text: message }] }]\n//     };\n\n//     try {\n//       const response = await fetch(\n//         `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(apiRequestBody)\n//         }\n//       );\n\n//       const data = await response.json();\n//       setMessages(prevMessages => [...prevMessages, {\n//         message: data.candidates[0].content.parts[0].text,\n//         sender: \"Gemini\"\n//       }]);\n//       setIsTyping(false);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       setIsTyping(false);\n//     }\n//   }\n\n//   return (\n//     <div className=\"chatbot-container\" style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\n//       <MainContainer>\n//         <ChatContainer>\n//           <MessageList\n//             scrollBehavior=\"smooth\"\n//             typingIndicator={isTyping ? <TypingIndicator content=\"IntelliConnect is typing...\" /> : null}\n//           >\n//             {messages.map((message, i) => <Message key={i} model={message} />)}\n//           </MessageList>\n//           <MessageInput placeholder=\"Type message here...\" onSend={handleSend} />\n//         </ChatContainer>\n//       </MainContainer>\n//     </div>\n//   );\n// }\n\nimport { useState } from 'react';\nimport Topbar from \"../../components/Topbar\";\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport \"./chatBot.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\nexport default function ChatBot() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm IntelliConnect! Ask me anything!\",\n    sender: \"Gemini\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      sender: \"user\"\n    };\n    setMessages([...messages, newMessage]);\n    setIsTyping(true);\n    await processMessageToGemini(message);\n  };\n  async function processMessageToGemini(message) {\n    const apiRequestBody = {\n      contents: [{\n        parts: [{\n          text: message\n        }]\n      }]\n    };\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      const data = await response.json();\n      const botResponse = ((_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"I'm sorry, I couldn't process that.\";\n      setMessages(prevMessages => [...prevMessages, {\n        message: botResponse,\n        sender: \"Gemini\"\n      }]);\n      setIsTyping(false);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setIsTyping(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"IntelliConnect is typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 43\n            }, this) : null,\n            children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(Message, {\n              model: {\n                message: msg.message,\n                direction: msg.sender === \"user\" ? \"outgoing\" : \"incoming\"\n              }\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type a message...\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatBot, \"4++/9RgNID9fsvALeHSjXqAnXW0=\");\n_c = ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["useState","Topbar","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","Fragment","_Fragment","API_KEY","ChatBot","_s","messages","setMessages","message","sender","isTyping","setIsTyping","handleSend","newMessage","processMessageToGemini","apiRequestBody","contents","parts","text","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","response","fetch","method","headers","body","JSON","stringify","data","json","botResponse","candidates","content","prevMessages","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","scrollBehavior","typingIndicator","map","msg","i","model","direction","placeholder","onSend","_c","$RefreshReg$"],"sources":["D:/IntelliConnect/client/src/pages/chatBot/ChatBot.jsx"],"sourcesContent":["// import { useState } from 'react';\r\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\n// import { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\n// import \"./chatBot.css\";\r\n// import Topbar from \"../../components/topbar/Topbar\";\r\n\r\n// const API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\r\n\r\n// export default function ChatBot() {\r\n//   const [messages, setMessages] = useState([\r\n//     {\r\n//       message: \"Hello, I'm IntelliConnect! Ask me anything!\",\r\n//       sentTime: \"just now\",\r\n//       sender: \"Gemini\"\r\n//     }\r\n//   ]);\r\n//   const [isTyping, setIsTyping] = useState(false);\r\n\r\n//   const handleSend = async (message) => {\r\n//     const newMessage = {\r\n//       message,\r\n//       direction: 'outgoing',\r\n//       sender: \"user\"\r\n//     };\r\n\r\n//     setMessages([...messages, newMessage]);\r\n//     setIsTyping(true);\r\n//     await processMessageToGemini(message);\r\n//   };\r\n\r\n//   async function processMessageToGemini(message) {\r\n//     const apiRequestBody = {\r\n//       contents: [{ parts: [{ text: message }] }]\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\r\n//         `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\r\n//         {\r\n//           method: \"POST\",\r\n//           headers: { \"Content-Type\": \"application/json\" },\r\n//           body: JSON.stringify(apiRequestBody)\r\n//         }\r\n//       );\r\n\r\n//       const data = await response.json();\r\n//       setMessages(prevMessages => [...prevMessages, {\r\n//         message: data.candidates[0].content.parts[0].text,\r\n//         sender: \"Gemini\"\r\n//       }]);\r\n//       setIsTyping(false);\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error);\r\n//       setIsTyping(false);\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"chatbot-container\" style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\r\n//       <MainContainer>\r\n//         <ChatContainer>\r\n//           <MessageList\r\n//             scrollBehavior=\"smooth\"\r\n//             typingIndicator={isTyping ? <TypingIndicator content=\"IntelliConnect is typing...\" /> : null}\r\n//           >\r\n//             {messages.map((message, i) => <Message key={i} model={message} />)}\r\n//           </MessageList>\r\n//           <MessageInput placeholder=\"Type message here...\" onSend={handleSend} />\r\n//         </ChatContainer>\r\n//       </MainContainer>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport { useState } from 'react';\r\nimport Topbar from \"../../components/Topbar\"; \r\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\nimport {\r\n  MainContainer,\r\n  ChatContainer,\r\n  MessageList,\r\n  Message,\r\n  MessageInput,\r\n  TypingIndicator\r\n} from '@chatscope/chat-ui-kit-react';\r\nimport \"./chatBot.css\";\r\n\r\nconst API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\"; \r\n\r\nexport default function ChatBot() {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      message: \"Hello, I'm IntelliConnect! Ask me anything!\",\r\n      sender: \"Gemini\"\r\n    }\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const handleSend = async (message) => {\r\n    const newMessage = {\r\n      message,\r\n      sender: \"user\"\r\n    };\r\n\r\n    setMessages([...messages, newMessage]);\r\n    setIsTyping(true);\r\n    await processMessageToGemini(message);\r\n  };\r\n\r\n  async function processMessageToGemini(message) {\r\n    const apiRequestBody = {\r\n      contents: [{ parts: [{ text: message }] }]\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(apiRequestBody)\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n\r\n      const botResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || \"I'm sorry, I couldn't process that.\";\r\n\r\n      setMessages(prevMessages => [...prevMessages, {\r\n        message: botResponse,\r\n        sender: \"Gemini\"\r\n      }]);\r\n\r\n      setIsTyping(false);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setIsTyping(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Topbar />\r\n      <div className=\"chatbot-container\">\r\n        <MainContainer>\r\n          <ChatContainer>\r\n            <MessageList \r\n              scrollBehavior=\"smooth\" \r\n              typingIndicator={isTyping ? <TypingIndicator content=\"IntelliConnect is typing...\" /> : null}\r\n            >\r\n              {messages.map((msg, i) => (\r\n                <Message\r\n                  key={i}\r\n                  model={{\r\n                    message: msg.message,\r\n                    direction: msg.sender === \"user\" ? \"outgoing\" : \"incoming\"\r\n                  }}\r\n                />\r\n              ))}\r\n            </MessageList>\r\n            <MessageInput placeholder=\"Type a message...\" onSend={handleSend} />        \r\n          </ChatContainer>\r\n        </MainContainer>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}