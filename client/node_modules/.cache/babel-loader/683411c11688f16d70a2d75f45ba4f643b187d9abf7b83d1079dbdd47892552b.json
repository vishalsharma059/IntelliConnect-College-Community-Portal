{"ast":null,"code":"var _jsxFileName = \"D:\\\\IntelliConnect\\\\client\\\\src\\\\components\\\\chatOnline\\\\ChatOnline.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import \"./chatOnline.css\";\n// import axios from \"axios\";\n\n// export default function ChatOnline({ onlineUsers, currentId, setCurrentChat }) {\n\n//   const [friends, setFriends] = useState([]);\n//   const [onlinefriends, setOnlineFriends] = useState([]);\n//   const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n\n//   useEffect(() => {\n//     if (!currentId) {\n//         console.error(\"currentId is undefined or null\");\n//         return;\n//     }\n\n//     const getFriends = async () => {\n//         try {\n//             const res = await axios.get(\"/users/friends/\" + currentId);\n//             setFriends(res.data);\n//         } catch (err) {\n//             console.error(\"Error fetching friends:\", err.message);\n//         }\n//     };\n\n//     getFriends();\n// }, [currentId]);\n\n//   useEffect(() => {\n//     setOnlineFriends(friends.filter((f) => onlineUsers.includes(f._id)));\n//   }, [friends, onlineUsers]);\n\n//   const handleClick = async (user) => {\n//     try {\n//       const res = await axios.get(`/conversations/find/${currentId}/${user._id}`);\n//       setCurrentChat(res.data);\n//     } catch (err) {\n//       console.log(err);\n\n//     }\n//   }\n\n//   return (\n//     <div className=\"chatOnline\">\n//       {onlinefriends.map((o) => (\n\n//         <div className=\"chatOnlineFriend\" onClick={()=> handleClick(o)}>\n//         <div className=\"chatOnlineImageContainer\">\n//             <img className=\"chatOnlineImage\" src={o?.profilePicture\n//               ? PF + o?.profilePicture\n//               : PF + \"person/noAvatar.png\"\n//             } alt=\"\" />\n//           <div className=\"chatOnlineBadge\"></div>\n//         </div>\n//           <span className=\"chatOnlineName\">{o.username }</span>\n//       </div>\n//       ))}\n//     </div>\n//   );\n// }\n\nimport { useEffect, useState } from \"react\";\nimport \"./chatOnline.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatOnline({\n  onlineUsers,\n  currentId,\n  setCurrentChat\n}) {\n  _s();\n  const [friends, setFriends] = useState([]);\n  const [onlineFriends, setOnlineFriends] = useState([]);\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER || \"/assets/\";\n  useEffect(() => {\n    if (!currentId) {\n      console.error(\"currentId is undefined or null\");\n      return;\n    }\n    const getFriends = async () => {\n      try {\n        const res = await axios.get(`/users/friends/${currentId}`);\n        setFriends(res.data);\n      } catch (err) {\n        console.error(\"Error fetching friends:\", err.message);\n      }\n    };\n    getFriends();\n  }, [currentId]);\n  useEffect(() => {\n    setOnlineFriends(friends.filter(f => onlineUsers.includes(f._id)));\n  }, [friends, onlineUsers]);\n  const handleClick = async user => {\n    try {\n      const res = await axios.get(`/conversations/find/${currentId}/${user._id}`);\n      setCurrentChat(res.data);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatOnline\",\n    children: onlineFriends.map(o => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatOnlineFriend\",\n      onClick: () => handleClick(o),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnlineImageContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chatOnlineImage\",\n          src: o !== null && o !== void 0 && o.profilePicture ? PF + (o === null || o === void 0 ? void 0 : o.profilePicture) : PF + \"person/noAvatar.png\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatOnlineBadge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chatOnlineName\",\n        children: o.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, o._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatOnline, \"LhrCBG2JdpC4LXNRz/CbesZ6zYg=\");\n_c = ChatOnline;\nvar _c;\n$RefreshReg$(_c, \"ChatOnline\");","map":{"version":3,"names":["useEffect","useState","axios","jsxDEV","_jsxDEV","ChatOnline","onlineUsers","currentId","setCurrentChat","_s","friends","setFriends","onlineFriends","setOnlineFriends","PF","process","env","REACT_APP_PUBLIC_FOLDER","console","error","getFriends","res","get","data","err","message","filter","f","includes","_id","handleClick","user","className","children","map","o","onClick","src","profilePicture","alt","fileName","_jsxFileName","lineNumber","columnNumber","username","_c","$RefreshReg$"],"sources":["D:/IntelliConnect/client/src/components/chatOnline/ChatOnline.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\r\n// import \"./chatOnline.css\";\r\n// import axios from \"axios\";\r\n\r\n// export default function ChatOnline({ onlineUsers, currentId, setCurrentChat }) {\r\n\r\n//   const [friends, setFriends] = useState([]);\r\n//   const [onlinefriends, setOnlineFriends] = useState([]);\r\n//   const PF = process.env.REACT_APP_PUBLIC_FOLDER;\r\n\r\n//   useEffect(() => {\r\n//     if (!currentId) {\r\n//         console.error(\"currentId is undefined or null\");\r\n//         return;\r\n//     }\r\n\r\n//     const getFriends = async () => {\r\n//         try {\r\n//             const res = await axios.get(\"/users/friends/\" + currentId);\r\n//             setFriends(res.data);\r\n//         } catch (err) {\r\n//             console.error(\"Error fetching friends:\", err.message);\r\n//         }\r\n//     };\r\n\r\n//     getFriends();\r\n// }, [currentId]);\r\n\r\n//   useEffect(() => {\r\n//     setOnlineFriends(friends.filter((f) => onlineUsers.includes(f._id)));\r\n//   }, [friends, onlineUsers]);\r\n  \r\n//   const handleClick = async (user) => {\r\n//     try {\r\n//       const res = await axios.get(`/conversations/find/${currentId}/${user._id}`);\r\n//       setCurrentChat(res.data);\r\n//     } catch (err) {\r\n//       console.log(err);\r\n      \r\n//     }\r\n//   }\r\n  \r\n\r\n//   return (\r\n//     <div className=\"chatOnline\">\r\n//       {onlinefriends.map((o) => (\r\n        \r\n//         <div className=\"chatOnlineFriend\" onClick={()=> handleClick(o)}>\r\n//         <div className=\"chatOnlineImageContainer\">\r\n//             <img className=\"chatOnlineImage\" src={o?.profilePicture\r\n//               ? PF + o?.profilePicture\r\n//               : PF + \"person/noAvatar.png\"\r\n//             } alt=\"\" />\r\n//           <div className=\"chatOnlineBadge\"></div>\r\n//         </div>\r\n//           <span className=\"chatOnlineName\">{o.username }</span>\r\n//       </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./chatOnline.css\";\r\nimport axios from \"axios\";\r\n\r\nexport default function ChatOnline({ onlineUsers, currentId, setCurrentChat }) {\r\n  const [friends, setFriends] = useState([]);\r\n  const [onlineFriends, setOnlineFriends] = useState([]);\r\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER || \"/assets/\";\r\n\r\n  useEffect(() => {\r\n    if (!currentId) {\r\n      console.error(\"currentId is undefined or null\");\r\n      return;\r\n    }\r\n\r\n    const getFriends = async () => {\r\n      try {\r\n        const res = await axios.get(`/users/friends/${currentId}`);\r\n        setFriends(res.data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching friends:\", err.message);\r\n      }\r\n    };\r\n\r\n    getFriends();\r\n  }, [currentId]);\r\n\r\n  useEffect(() => {\r\n    setOnlineFriends(friends.filter((f) => onlineUsers.includes(f._id)));\r\n  }, [friends, onlineUsers]);\r\n\r\n  const handleClick = async (user) => {\r\n    try {\r\n      const res = await axios.get(`/conversations/find/${currentId}/${user._id}`);\r\n      setCurrentChat(res.data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatOnline\">\r\n      {onlineFriends.map((o) => (\r\n        <div\r\n          className=\"chatOnlineFriend\"\r\n          key={o._id}\r\n          onClick={() => handleClick(o)}\r\n        >\r\n          <div className=\"chatOnlineImageContainer\">\r\n            <img\r\n              className=\"chatOnlineImage\"\r\n              src={\r\n                o?.profilePicture\r\n                  ? PF + o?.profilePicture\r\n                  : PF + \"person/noAvatar.png\"\r\n              }\r\n              alt=\"\"\r\n            />\r\n            <div className=\"chatOnlineBadge\"></div>\r\n          </div>\r\n          <span className=\"chatOnlineName\">{o.username}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}