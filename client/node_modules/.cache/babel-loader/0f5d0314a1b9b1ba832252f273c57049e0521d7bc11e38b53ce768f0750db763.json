{"ast":null,"code":"var _jsxFileName = \"D:\\\\IntelliConnect\\\\client\\\\src\\\\pages\\\\chatBot\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n// import \"./chatBot.css\";\n// import Topbar from \"../../components/topbar/Topbar\";\n\n// const API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\n\n// export default function ChatBot() {\n//   const [messages, setMessages] = useState([\n//     {\n//       message: \"Hello, I'm IntelliConnect! Ask me anything!\",\n//       sentTime: \"just now\",\n//       sender: \"Gemini\"\n//     }\n//   ]);\n//   const [isTyping, setIsTyping] = useState(false);\n\n//   const handleSend = async (message) => {\n//     const newMessage = {\n//       message,\n//       direction: 'outgoing',\n//       sender: \"user\"\n//     };\n\n//     setMessages([...messages, newMessage]);\n//     setIsTyping(true);\n//     await processMessageToGemini(message);\n//   };\n\n//   async function processMessageToGemini(message) {\n//     const apiRequestBody = {\n//       contents: [{ parts: [{ text: message }] }]\n//     };\n\n//     try {\n//       const response = await fetch(\n//         `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(apiRequestBody)\n//         }\n//       );\n\n//       const data = await response.json();\n//       setMessages(prevMessages => [...prevMessages, {\n//         message: data.candidates[0].content.parts[0].text,\n//         sender: \"Gemini\"\n//       }]);\n//       setIsTyping(false);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       setIsTyping(false);\n//     }\n//   }\n\n//   return (\n//     <div className=\"chatbot-container\" style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\n//       <MainContainer>\n//         <ChatContainer>\n//           <MessageList\n//             scrollBehavior=\"smooth\"\n//             typingIndicator={isTyping ? <TypingIndicator content=\"IntelliConnect is typing...\" /> : null}\n//           >\n//             {messages.map((message, i) => <Message key={i} model={message} />)}\n//           </MessageList>\n//           <MessageInput placeholder=\"Type message here...\" onSend={handleSend} />\n//         </ChatContainer>\n//       </MainContainer>\n//     </div>\n//   );\n// }\n\nimport { useState } from 'react';\nimport Topbar from \"../../components/topbar/Topbar\"; // Import IntelliConnect's top bar\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport \"./chatBot.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\nexport default function ChatBot() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm IntelliConnect! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"Gemini\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    setMessages([...messages, newMessage]);\n    setIsTyping(true);\n    await processMessageToGemini(message);\n  };\n  async function processMessageToGemini(message) {\n    const apiRequestBody = {\n      contents: [{\n        parts: [{\n          text: message\n        }]\n      }]\n    };\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      const data = await response.json();\n      setMessages(prevMessages => [...prevMessages, {\n        message: data.candidates[0].content.parts[0].text,\n        sender: \"Gemini\"\n      }]);\n      setIsTyping(false);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setIsTyping(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"IntelliConnect is typing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 57\n            }, this) : null,\n            children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n              model: message\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 59\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here...\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatBot, \"nKqFq1Dc6VI8UoKvp0Hiz43DGjo=\");\n_c = ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["useState","Topbar","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","Fragment","_Fragment","API_KEY","ChatBot","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSend","newMessage","direction","processMessageToGemini","apiRequestBody","contents","parts","text","response","fetch","method","headers","body","JSON","stringify","data","json","prevMessages","candidates","content","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","scrollBehavior","typingIndicator","map","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["D:/IntelliConnect/client/src/pages/chatBot/ChatBot.jsx"],"sourcesContent":["// import { useState } from 'react';\r\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\n// import { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\n// import \"./chatBot.css\";\r\n// import Topbar from \"../../components/topbar/Topbar\";\r\n\r\n// const API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\r\n\r\n// export default function ChatBot() {\r\n//   const [messages, setMessages] = useState([\r\n//     {\r\n//       message: \"Hello, I'm IntelliConnect! Ask me anything!\",\r\n//       sentTime: \"just now\",\r\n//       sender: \"Gemini\"\r\n//     }\r\n//   ]);\r\n//   const [isTyping, setIsTyping] = useState(false);\r\n\r\n//   const handleSend = async (message) => {\r\n//     const newMessage = {\r\n//       message,\r\n//       direction: 'outgoing',\r\n//       sender: \"user\"\r\n//     };\r\n\r\n//     setMessages([...messages, newMessage]);\r\n//     setIsTyping(true);\r\n//     await processMessageToGemini(message);\r\n//   };\r\n\r\n//   async function processMessageToGemini(message) {\r\n//     const apiRequestBody = {\r\n//       contents: [{ parts: [{ text: message }] }]\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\r\n//         `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\r\n//         {\r\n//           method: \"POST\",\r\n//           headers: { \"Content-Type\": \"application/json\" },\r\n//           body: JSON.stringify(apiRequestBody)\r\n//         }\r\n//       );\r\n\r\n//       const data = await response.json();\r\n//       setMessages(prevMessages => [...prevMessages, {\r\n//         message: data.candidates[0].content.parts[0].text,\r\n//         sender: \"Gemini\"\r\n//       }]);\r\n//       setIsTyping(false);\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error);\r\n//       setIsTyping(false);\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"chatbot-container\" style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\r\n//       <MainContainer>\r\n//         <ChatContainer>\r\n//           <MessageList\r\n//             scrollBehavior=\"smooth\"\r\n//             typingIndicator={isTyping ? <TypingIndicator content=\"IntelliConnect is typing...\" /> : null}\r\n//           >\r\n//             {messages.map((message, i) => <Message key={i} model={message} />)}\r\n//           </MessageList>\r\n//           <MessageInput placeholder=\"Type message here...\" onSend={handleSend} />\r\n//         </ChatContainer>\r\n//       </MainContainer>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport { useState } from 'react';\r\nimport Topbar from \"../../components/topbar/Topbar\"; // Import IntelliConnect's top bar\r\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\nimport \"./chatBot.css\";\r\n\r\nconst API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\r\n\r\nexport default function ChatBot() {\r\n    const [messages, setMessages] = useState([\r\n        {\r\n            message: \"Hello, I'm IntelliConnect! Ask me anything!\",\r\n            sentTime: \"just now\",\r\n            sender: \"Gemini\"\r\n        }\r\n    ]);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n\r\n    const handleSend = async (message) => {\r\n        const newMessage = {\r\n            message,\r\n            direction: 'outgoing',\r\n            sender: \"user\"\r\n        };\r\n\r\n        setMessages([...messages, newMessage]);\r\n        setIsTyping(true);\r\n        await processMessageToGemini(message);\r\n    };\r\n\r\n    async function processMessageToGemini(message) {\r\n        const apiRequestBody = {\r\n            contents: [{ parts: [{ text: message }] }]\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(\r\n                `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(apiRequestBody)\r\n                }\r\n            );\r\n\r\n            const data = await response.json();\r\n            setMessages(prevMessages => [...prevMessages, {\r\n                message: data.candidates[0].content.parts[0].text,\r\n                sender: \"Gemini\"\r\n            }]);\r\n            setIsTyping(false);\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            setIsTyping(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Topbar />\r\n            <div className=\"chatbot-container\">\r\n                <MainContainer>\r\n                    <ChatContainer>\r\n                        <MessageList\r\n                            scrollBehavior=\"smooth\"\r\n                            typingIndicator={isTyping ? <TypingIndicator content=\"IntelliConnect is typing...\" /> : null}\r\n                        >\r\n                            {messages.map((message, i) => <Message key={i} model={message} />)}\r\n                        </MessageList>\r\n                        <MessageInput placeholder=\"Type message here...\" onSend={handleSend} />\r\n                    </ChatContainer>\r\n                </MainContainer>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}