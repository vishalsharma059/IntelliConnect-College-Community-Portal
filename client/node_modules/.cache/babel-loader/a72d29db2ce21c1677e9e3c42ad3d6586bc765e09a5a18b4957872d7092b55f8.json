{"ast":null,"code":"var _jsxFileName = \"D:\\\\IntelliConnect\\\\client\\\\src\\\\pages\\\\messenger\\\\Messenger.jsx\",\n  _s = $RefreshSig$();\n// import \"./messenger.css\";\n// import Topbar from \"../../components/topbar/Topbar\";\n// import Conversation from \"../../components/conversation/Conversation\";\n// import Message from \"../../components/message/Message\";\n// import ChatOnline from \"../../components/chatOnline/ChatOnline\";\n// import { useContext, useEffect, useState } from \"react\";\n// import { AuthContext } from \"../../context/AuthContext\";\n// import axios from \"axios\";\n\n// export default function Messenger() {\n//   const [conversations, setConversations] = useState([]);\n//   const [currentChat, setCurrentChat] = useState(null);\n//   const [messages, setMessages] = useState([]);\n//   const [newMessage, setNewMessage] = useState(\"\");\n\n//   const { user } = useContext(AuthContext);\n\n//   useEffect(() => {\n//     const getConversations = async () => {\n//       try {\n//         const res = await axios.get(\"/conversations/\" + user._id);\n//         setConversations(res.data);\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     };\n//     getConversations();\n//   }, [user._id]);\n\n//   useEffect(() => {\n//     const getMessage = async () => {\n//       try {\n//         const res = await axios.get(\"/messages/\" + currentChat?._id);\n//         setMessages(res.data);\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     };\n//     getMessage();\n//   }, [currentChat]);\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         const message = {\n//             sender: user._id,\n//             text: newMessage,\n//             conversationId: currentChat._id,\n//         };\n//         try {\n//             const res = await axios.post(\"/messages\", message);\n//             setMessages([...messages, res.data]);\n//             setNewMessage(\"\")\n//         } catch (err) {\n//             console.log(err);\n\n//         }\n//     }\n\n//   return (\n//     <>\n//       <Topbar />\n//       <div className=\"messenger\">\n//         <div className=\"chatMenu\">\n//           <div className=\"chatMenuWrapper\">\n//             <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\n//             {conversations &&\n//               conversations.map((c) => (\n//                 <div onClick={() => setCurrentChat(c)}>\n//                   <Conversation\n//                     key={c._id}\n//                     conversation={c}\n//                     currentUser={user}\n//                   />\n//                 </div>\n//               ))}\n//           </div>\n//         </div>\n//         <div className=\"chatBox\">\n//           <div className=\"chatBoxWrapper\">\n//             {currentChat ? (\n//               <>\n//                 <div className=\"chatBoxTop\">\n//                   {messages.map((m) => (\n//                     <Message message={m} own={m.sender === user._id} />\n//                   ))}\n//                 </div>\n\n//                 <div className=\"chatBoxBottom\">\n//                   <textarea\n//                     className=\"chatMessageInput\"\n//                     placeholder=\"write something...\"\n//                     onChange={(e) => setNewMessage(e.target.value)}\n//                     value={newMessage}\n//                   ></textarea>\n//                   <button className=\"chatSubmitButton\" onClick={handleSubmit}>Send</button>\n//                 </div>\n//               </>\n//             ) : (\n//               <span className=\"noConversationText\">\n//                 Open a converation to start a chat.\n//               </span>\n//             )}\n//           </div>\n//         </div>\n\n//         <div className=\"chatOnline\">\n//           <div className=\"chatOnlineWrapper\">\n//             <ChatOnline />\n//             <ChatOnline />\n//             <ChatOnline />\n//             <ChatOnline />\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\nimport \"./messenger.css\";\nimport Topbar from \"../../components/topbar/Topbar\";\nimport Conversation from \"../../components/conversation/Conversation\";\nimport Message from \"../../components/message/Message\";\nimport ChatOnline from \"../../components/chatOnline/ChatOnline\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Messenger() {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const socket = useRef();\n  const scrollRef = useRef(null);\n  const {\n    user\n  } = useContext(AuthContext);\n\n  // Establish the socket connection\n  useEffect(() => {\n    socket.current = io(\"ws://localhost:8900\");\n    socket.current.on(\"getMessage\", data => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now()\n      });\n    });\n    return () => {\n      socket.current.disconnect(); // Disconnect socket on component unmount\n    };\n  }, []);\n  useEffect(() => {\n    arrivalMessage && (currentChat === null || currentChat === void 0 ? void 0 : currentChat.members.includes(arrivalMessage.sender)) && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]);\n\n  // Handle socket events\n  useEffect(() => {\n    const handleGetUsers = users => {\n      // console.log(users); // Logs the updated list of users\n      setOnlineUsers(user.followings.filter(f => users.some(u => u.userId === f)));\n    };\n    socket.current.emit(\"addUser\", user._id);\n    socket.current.on(\"getUsers\", handleGetUsers);\n\n    // Cleanup to avoid duplicate event listeners\n    return () => {\n      socket.current.off(\"getUsers\", handleGetUsers);\n    };\n  }, [user._id]);\n\n  // useEffect(() => {\n  //     socket.current = io(\"ws://localhost:8900\");\n  // }, []);\n\n  useEffect(() => {\n    socket.current.emit(\"addUser\", user._id);\n    socket.current.on(\"getUsers\", users => {\n      console.log(users);\n    });\n  }, [user]);\n\n  // Fetch conversations\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\"/conversations/\" + user._id);\n        setConversations(res.data);\n      } catch (err) {\n        console.error(\"Error fetching conversations:\", err);\n      }\n    };\n    getConversations();\n  }, [user._id]);\n\n  // Fetch messages\n  useEffect(() => {\n    const getMessage = async () => {\n      try {\n        const res = await axios.get(\"/messages/\" + (currentChat === null || currentChat === void 0 ? void 0 : currentChat._id));\n        setMessages(res.data);\n      } catch (err) {\n        console.error(\"Error fetching messages:\", err);\n      }\n    };\n    getMessage();\n  }, [currentChat]);\n\n  // Handle message submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!newMessage.trim()) return; // Prevent empty submissions\n\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id\n    };\n    setIsLoading(true); // Start loading\n\n    const receiverId = currentChat.members.find(member => member !== user._id);\n    socket.current.emit(\"sendMessage\", {\n      senderId: user._id,\n      receiverId,\n      text: newMessage\n    });\n    try {\n      const res = await axios.post(\"/messages\", message);\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\"); // Clear textarea\n    } catch (err) {\n      console.error(\"Error sending message:\", err);\n      alert(\"Failed to send message. Please try again.\");\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n  useEffect(() => {\n    var _scrollRef$current;\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messenger\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatMenu\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatMenuWrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Search for friends\",\n            className: \"chatMenuInput\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), conversations && conversations.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setCurrentChat(c),\n            children: /*#__PURE__*/_jsxDEV(Conversation, {\n              conversation: c,\n              currentUser: user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 19\n            }, this)\n          }, c._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatBox\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBoxWrapper\",\n          children: currentChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxTop\",\n              children: messages.map((m, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: scrollRef,\n                children: /*#__PURE__*/_jsxDEV(Message, {\n                  message: m,\n                  own: m.sender === user._id\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxBottom\",\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"chatMessageInput\",\n                placeholder: \"write something...\",\n                onChange: e => setNewMessage(e.target.value),\n                value: newMessage,\n                disabled: isLoading // Disable while loading\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"chatSubmitButton\",\n                onClick: handleSubmit,\n                disabled: isLoading // Disable while loading\n                ,\n                children: isLoading ? \"Sending...\" : \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"noConversationText\",\n            children: \"Open a conversation to start a chat.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnline\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatOnlineWrapper\",\n          children: /*#__PURE__*/_jsxDEV(ChatOnline, {\n            onlineUsers: onlineUsers,\n            currentId: user._id,\n            setCurrentChat: setCurrentChat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Messenger, \"1NsZzMQ+Zgull5TDPzJtD3Y0VO0=\");\n_c = Messenger;\nvar _c;\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"names":["Topbar","Conversation","Message","ChatOnline","useContext","useEffect","useRef","useState","AuthContext","axios","io","jsxDEV","_jsxDEV","Fragment","_Fragment","Messenger","_s","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","newMessage","setNewMessage","arrivalMessage","setArrivalMessage","onlineUsers","setOnlineUsers","isLoading","setIsLoading","socket","scrollRef","user","current","on","data","sender","senderId","text","createdAt","Date","now","disconnect","members","includes","prev","handleGetUsers","users","followings","filter","f","some","u","userId","emit","_id","off","console","log","getConversations","res","get","err","error","getMessage","handleSubmit","e","preventDefault","trim","message","conversationId","receiverId","find","member","post","alert","_scrollRef$current","scrollIntoView","behavior","children","fileName","_jsxFileName","lineNumber","columnNumber","className","placeholder","map","c","onClick","conversation","currentUser","m","index","ref","own","onChange","target","value","disabled","currentId","_c","$RefreshReg$"],"sources":["D:/IntelliConnect/client/src/pages/messenger/Messenger.jsx"],"sourcesContent":["// import \"./messenger.css\";\r\n// import Topbar from \"../../components/topbar/Topbar\";\r\n// import Conversation from \"../../components/conversation/Conversation\";\r\n// import Message from \"../../components/message/Message\";\r\n// import ChatOnline from \"../../components/chatOnline/ChatOnline\";\r\n// import { useContext, useEffect, useState } from \"react\";\r\n// import { AuthContext } from \"../../context/AuthContext\";\r\n// import axios from \"axios\";\r\n\r\n// export default function Messenger() {\r\n//   const [conversations, setConversations] = useState([]);\r\n//   const [currentChat, setCurrentChat] = useState(null);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n//   const { user } = useContext(AuthContext);\r\n\r\n//   useEffect(() => {\r\n//     const getConversations = async () => {\r\n//       try {\r\n//         const res = await axios.get(\"/conversations/\" + user._id);\r\n//         setConversations(res.data);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//       }\r\n//     };\r\n//     getConversations();\r\n//   }, [user._id]);\r\n\r\n//   useEffect(() => {\r\n//     const getMessage = async () => {\r\n//       try {\r\n//         const res = await axios.get(\"/messages/\" + currentChat?._id);\r\n//         setMessages(res.data);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//       }\r\n//     };\r\n//     getMessage();\r\n//   }, [currentChat]);\r\n    \r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         const message = {\r\n//             sender: user._id,\r\n//             text: newMessage,\r\n//             conversationId: currentChat._id,\r\n//         };\r\n//         try {\r\n//             const res = await axios.post(\"/messages\", message);\r\n//             setMessages([...messages, res.data]);\r\n//             setNewMessage(\"\")\r\n//         } catch (err) {\r\n//             console.log(err);\r\n            \r\n//         }\r\n//     }\r\n\r\n//   return (\r\n//     <>\r\n//       <Topbar />\r\n//       <div className=\"messenger\">\r\n//         <div className=\"chatMenu\">\r\n//           <div className=\"chatMenuWrapper\">\r\n//             <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\r\n//             {conversations &&\r\n//               conversations.map((c) => (\r\n//                 <div onClick={() => setCurrentChat(c)}>\r\n//                   <Conversation\r\n//                     key={c._id}\r\n//                     conversation={c}\r\n//                     currentUser={user}\r\n//                   />\r\n//                 </div>\r\n//               ))}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"chatBox\">\r\n//           <div className=\"chatBoxWrapper\">\r\n//             {currentChat ? (\r\n//               <>\r\n//                 <div className=\"chatBoxTop\">\r\n//                   {messages.map((m) => (\r\n//                     <Message message={m} own={m.sender === user._id} />\r\n//                   ))}\r\n//                 </div>\r\n\r\n//                 <div className=\"chatBoxBottom\">\r\n//                   <textarea\r\n//                     className=\"chatMessageInput\"\r\n//                     placeholder=\"write something...\"\r\n//                     onChange={(e) => setNewMessage(e.target.value)}\r\n//                     value={newMessage}\r\n//                   ></textarea>\r\n//                   <button className=\"chatSubmitButton\" onClick={handleSubmit}>Send</button>\r\n//                 </div>\r\n//               </>\r\n//             ) : (\r\n//               <span className=\"noConversationText\">\r\n//                 Open a converation to start a chat.\r\n//               </span>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"chatOnline\">\r\n//           <div className=\"chatOnlineWrapper\">\r\n//             <ChatOnline />\r\n//             <ChatOnline />\r\n//             <ChatOnline />\r\n//             <ChatOnline />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\nimport \"./messenger.css\";\r\nimport Topbar from \"../../components/topbar/Topbar\";\r\nimport Conversation from \"../../components/conversation/Conversation\";\r\nimport Message from \"../../components/message/Message\";\r\nimport ChatOnline from \"../../components/chatOnline/ChatOnline\";\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport {io} from \"socket.io-client\"\r\n\r\nexport default function Messenger() {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [currentChat, setCurrentChat] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [arrivalMessage, setArrivalMessage] = useState(null);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const socket = useRef();\r\n    const scrollRef = useRef(null);\r\n    const { user } = useContext(AuthContext);\r\n    \r\n        // Establish the socket connection\r\n        useEffect(() => {\r\n            socket.current = io(\"ws://localhost:8900\");\r\n            socket.current.on(\"getMessage\", data => {\r\n                setArrivalMessage({\r\n                    sender: data.senderId,\r\n                    text: data.text,\r\n                    createdAt: Date.now(),\r\n                    \r\n                });\r\n            });\r\n            return () => {\r\n                socket.current.disconnect(); // Disconnect socket on component unmount\r\n            };\r\n        }, []);\r\n    \r\n    useEffect(() => {\r\n        arrivalMessage && currentChat?.members.includes(arrivalMessage.sender) && setMessages((prev) => [...prev, arrivalMessage])\r\n    }, [arrivalMessage, currentChat]);\r\n    \r\n        // Handle socket events\r\n        useEffect(() => {\r\n            const handleGetUsers = (users) => {\r\n                // console.log(users); // Logs the updated list of users\r\n                setOnlineUsers(user.followings.filter(f=>users.some((u)=> u.userId === f)));\r\n            };\r\n    \r\n            socket.current.emit(\"addUser\", user._id);\r\n            socket.current.on(\"getUsers\", handleGetUsers);\r\n    \r\n            // Cleanup to avoid duplicate event listeners\r\n            return () => {\r\n                socket.current.off(\"getUsers\", handleGetUsers);\r\n            };\r\n        }, [user._id]);\r\n\r\n    // useEffect(() => {\r\n    //     socket.current = io(\"ws://localhost:8900\");\r\n    // }, []);\r\n    \r\n    useEffect(() => {\r\n        socket.current.emit(\"addUser\", user._id);\r\n        socket.current.on(\"getUsers\", users => {\r\n            console.log(users);\r\n            \r\n        })\r\n    }, [user]);\r\n    \r\n    \r\n\r\n  // Fetch conversations\r\n  useEffect(() => {\r\n    const getConversations = async () => {\r\n      try {\r\n        const res = await axios.get(\"/conversations/\" + user._id);\r\n        setConversations(res.data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching conversations:\", err);\r\n      }\r\n    };\r\n    getConversations();\r\n  }, [user._id]);\r\n\r\n  // Fetch messages\r\n  useEffect(() => {\r\n    const getMessage = async () => {\r\n      try {\r\n        const res = await axios.get(\"/messages/\" + currentChat?._id);\r\n        setMessages(res.data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching messages:\", err);\r\n      }\r\n    };\r\n    getMessage();\r\n  }, [currentChat]);\r\n\r\n  // Handle message submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim()) return; // Prevent empty submissions\r\n\r\n    const message = {\r\n      sender: user._id,\r\n      text: newMessage,\r\n      conversationId: currentChat._id,\r\n    };\r\n\r\n      setIsLoading(true); // Start loading\r\n\r\n      const receiverId = currentChat.members.find(member=> member !== user._id)\r\n      \r\n      socket.current.emit(\"sendMessage\", {\r\n          senderId: user._id,\r\n          receiverId,\r\n          text: newMessage,\r\n      })\r\n\r\n    try {\r\n      const res = await axios.post(\"/messages\", message);\r\n      setMessages([...messages, res.data]);\r\n      setNewMessage(\"\"); // Clear textarea\r\n    } catch (err) {\r\n      console.error(\"Error sending message:\", err);\r\n      alert(\"Failed to send message. Please try again.\");\r\n    } finally {\r\n      setIsLoading(false); // Stop loading\r\n    }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n    }, [messages])\r\n    \r\n\r\n\r\n  return (\r\n    <>\r\n      <Topbar />\r\n      <div className=\"messenger\">\r\n        <div className=\"chatMenu\">\r\n          <div className=\"chatMenuWrapper\">\r\n            <input placeholder=\"Search for friends\" className=\"chatMenuInput\" />\r\n            {conversations &&\r\n              conversations.map((c) => (\r\n                <div onClick={() => setCurrentChat(c)} key={c._id}>\r\n                  <Conversation conversation={c} currentUser={user} />\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"chatBox\">\r\n          <div className=\"chatBoxWrapper\">\r\n            {currentChat ? (\r\n              <>\r\n                <div className=\"chatBoxTop\">\r\n                                  {messages.map((m, index) => (\r\n                      <div ref= {scrollRef}>                \r\n                    <Message key={index} message={m} own={m.sender === user._id} />\r\n                      </div>\r\n                  ))}\r\n                </div>\r\n\r\n                <div className=\"chatBoxBottom\">\r\n                  <textarea\r\n                    className=\"chatMessageInput\"\r\n                    placeholder=\"write something...\"\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    value={newMessage}\r\n                    disabled={isLoading} // Disable while loading\r\n                  ></textarea>\r\n                  <button\r\n                    className=\"chatSubmitButton\"\r\n                    onClick={handleSubmit}\r\n                    disabled={isLoading} // Disable while loading\r\n                  >\r\n                    {isLoading ? \"Sending...\" : \"Send\"}\r\n                  </button>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <span className=\"noConversationText\">\r\n                Open a conversation to start a chat.\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"chatOnline\">\r\n          <div className=\"chatOnlineWrapper\">\r\n                      <ChatOnline onlineUsers={onlineUsers } currentId = {user._id} setCurrentChat = {setCurrentChat} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}