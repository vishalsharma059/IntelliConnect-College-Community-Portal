{"ast":null,"code":"var _jsxFileName = \"D:\\\\IntelliConnect\\\\client\\\\src\\\\pages\\\\chatBot\\\\ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport \"./chatBot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"YOUR_API_KEY\";\nexport default function ChatBot() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm Gemini! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"Gemini\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSend = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    setMessages([...messages, newMessage]);\n    setIsTyping(true);\n    await processMessageToGemini(message);\n  };\n  async function processMessageToGemini(message) {\n    const apiRequestBody = {\n      contents: [{\n        parts: [{\n          text: message\n        }]\n      }]\n    };\n    try {\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      const data = await response.json();\n      setMessages(prevMessages => [...prevMessages, {\n        message: data.candidates[0].content.parts[0].text,\n        sender: \"Gemini\"\n      }]);\n      setIsTyping(false);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setIsTyping(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    style: {\n      position: \"relative\",\n      height: \"800px\",\n      width: \"700px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MainContainer, {\n      children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          scrollBehavior: \"smooth\",\n          typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n            content: \"Gemini is typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 41\n          }, this) : null,\n          children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n            model: message\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 43\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          placeholder: \"Type message here...\",\n          onSend: handleSend\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"S7C5cu83oxWZjgRG9QtsETXiyuM=\");\n_c = ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","ChatBot","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSend","newMessage","direction","processMessageToGemini","apiRequestBody","contents","parts","text","response","fetch","method","headers","body","JSON","stringify","data","json","prevMessages","candidates","content","error","console","className","style","position","height","width","children","scrollBehavior","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","map","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["D:/IntelliConnect/client/src/pages/chatBot/ChatBot.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\nimport \"./chatBot.css\";\r\n\r\nconst API_KEY = \"YOUR_API_KEY\";\r\n\r\nexport default function ChatBot() {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      message: \"Hello, I'm Gemini! Ask me anything!\",\r\n      sentTime: \"just now\",\r\n      sender: \"Gemini\"\r\n    }\r\n  ]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const handleSend = async (message) => {\r\n    const newMessage = {\r\n      message,\r\n      direction: 'outgoing',\r\n      sender: \"user\"\r\n    };\r\n\r\n    setMessages([...messages, newMessage]);\r\n    setIsTyping(true);\r\n    await processMessageToGemini(message);\r\n  };\r\n\r\n  async function processMessageToGemini(message) {\r\n    const apiRequestBody = {\r\n      contents: [{ parts: [{ text: message }] }]\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(apiRequestBody)\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      setMessages(prevMessages => [...prevMessages, {\r\n        message: data.candidates[0].content.parts[0].text,\r\n        sender: \"Gemini\"\r\n      }]);\r\n      setIsTyping(false);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setIsTyping(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"chatbot-container\" style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\r\n      <MainContainer>\r\n        <ChatContainer>\r\n          <MessageList \r\n            scrollBehavior=\"smooth\" \r\n            typingIndicator={isTyping ? <TypingIndicator content=\"Gemini is typing...\" /> : null}\r\n          >\r\n            {messages.map((message, i) => <Message key={i} model={message} />)}\r\n          </MessageList>\r\n          <MessageInput placeholder=\"Type message here...\" onSend={handleSend} />        \r\n        </ChatContainer>\r\n      </MainContainer>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}