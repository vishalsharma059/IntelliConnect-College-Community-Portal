{"ast":null,"code":"// import { useState } from 'react';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\n// import \"./chatBot.css\";\n// import Topbar from \"../../components/topbar/Topbar\";\n\n// const API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\n\n// export default function ChatBot() {\n//   const [messages, setMessages] = useState([\n//     {\n//       message: \"Hello, I'm IntelliConnect! Ask me anything!\",\n//       sentTime: \"just now\",\n//       sender: \"Gemini\"\n//     }\n//   ]);\n//   const [isTyping, setIsTyping] = useState(false);\n\n//   const handleSend = async (message) => {\n//     const newMessage = {\n//       message,\n//       direction: 'outgoing',\n//       sender: \"user\"\n//     };\n\n//     setMessages([...messages, newMessage]);\n//     setIsTyping(true);\n//     await processMessageToGemini(message);\n//   };\n\n//   async function processMessageToGemini(message) {\n//     const apiRequestBody = {\n//       contents: [{ parts: [{ text: message }] }]\n//     };\n\n//     try {\n//       const response = await fetch(\n//         `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\n//         {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(apiRequestBody)\n//         }\n//       );\n\n//       const data = await response.json();\n//       setMessages(prevMessages => [...prevMessages, {\n//         message: data.candidates[0].content.parts[0].text,\n//         sender: \"Gemini\"\n//       }]);\n//       setIsTyping(false);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//       setIsTyping(false);\n//     }\n//   }\n\n//   return (\n//     <div className=\"chatbot-container\" style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\n//       <MainContainer>\n//         <ChatContainer>\n//           <MessageList \n//             scrollBehavior=\"smooth\" \n//             typingIndicator={isTyping ? <TypingIndicator content=\"IntelliConnect is typing...\" /> : null}\n//           >\n//             {messages.map((message, i) => <Message key={i} model={message} />)}\n//           </MessageList>\n//           <MessageInput placeholder=\"Type message here...\" onSend={handleSend} />        \n//         </ChatContainer>\n//       </MainContainer>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/IntelliConnect/client/src/pages/chatBot/ChatBot.jsx"],"sourcesContent":["// import { useState } from 'react';\r\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\r\n// import { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from '@chatscope/chat-ui-kit-react';\r\n// import \"./chatBot.css\";\r\n// import Topbar from \"../../components/topbar/Topbar\";\r\n\r\n// const API_KEY = \"AIzaSyBJLcgAx09GOjuL6_AIOP5BAyIu7hni-AI\";\r\n\r\n// export default function ChatBot() {\r\n//   const [messages, setMessages] = useState([\r\n//     {\r\n//       message: \"Hello, I'm IntelliConnect! Ask me anything!\",\r\n//       sentTime: \"just now\",\r\n//       sender: \"Gemini\"\r\n//     }\r\n//   ]);\r\n//   const [isTyping, setIsTyping] = useState(false);\r\n\r\n//   const handleSend = async (message) => {\r\n//     const newMessage = {\r\n//       message,\r\n//       direction: 'outgoing',\r\n//       sender: \"user\"\r\n//     };\r\n\r\n//     setMessages([...messages, newMessage]);\r\n//     setIsTyping(true);\r\n//     await processMessageToGemini(message);\r\n//   };\r\n\r\n//   async function processMessageToGemini(message) {\r\n//     const apiRequestBody = {\r\n//       contents: [{ parts: [{ text: message }] }]\r\n//     };\r\n\r\n//     try {\r\n//       const response = await fetch(\r\n//         `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,\r\n//         {\r\n//           method: \"POST\",\r\n//           headers: { \"Content-Type\": \"application/json\" },\r\n//           body: JSON.stringify(apiRequestBody)\r\n//         }\r\n//       );\r\n\r\n//       const data = await response.json();\r\n//       setMessages(prevMessages => [...prevMessages, {\r\n//         message: data.candidates[0].content.parts[0].text,\r\n//         sender: \"Gemini\"\r\n//       }]);\r\n//       setIsTyping(false);\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error);\r\n//       setIsTyping(false);\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"chatbot-container\" style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\r\n//       <MainContainer>\r\n//         <ChatContainer>\r\n//           <MessageList \r\n//             scrollBehavior=\"smooth\" \r\n//             typingIndicator={isTyping ? <TypingIndicator content=\"IntelliConnect is typing...\" /> : null}\r\n//           >\r\n//             {messages.map((message, i) => <Message key={i} model={message} />)}\r\n//           </MessageList>\r\n//           <MessageInput placeholder=\"Type message here...\" onSend={handleSend} />        \r\n//         </ChatContainer>\r\n//       </MainContainer>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}