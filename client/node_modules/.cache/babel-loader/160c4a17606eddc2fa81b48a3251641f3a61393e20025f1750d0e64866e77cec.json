{"ast":null,"code":"var _jsxFileName = \"D:\\\\IntelliConnect\\\\client\\\\src\\\\components\\\\chatOnline\\\\ChatOnline.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./chatOnline.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatOnline({\n  onlineUsers,\n  currentId,\n  setCurrentChat\n}) {\n  _s();\n  const [friends, setFriends] = useState([]);\n  const [onlinefriends, setOnlineFriends] = useState([]);\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\n  useEffect(() => {\n    if (!currentId) {\n      console.error(\"currentId is undefined or null\");\n      return;\n    }\n    const getFriends = async () => {\n      try {\n        const res = await axios.get(\"/users/friends/\" + currentId);\n        setFriends(res.data);\n      } catch (err) {\n        console.error(\"Error fetching friends:\", err.message);\n      }\n    };\n    getFriends();\n  }, [currentId]);\n  useEffect(() => {\n    setOnlineFriends(friends.filter(f => onlineUsers.includes(f._id)));\n  }, [friends, onlineUsers]);\n  const handleClick = async user => {\n    try {\n      let res = await axios.get(`/conversations/find/${currentId}/${user._id}`);\n      if (!res.data) {\n        // If no conversation exists, create a new one\n        res = await axios.post(\"/conversations\", {\n          senderId: currentId,\n          receiverId: user._id\n        });\n      }\n      setCurrentChat(res.data); // Set the conversation to the current chat\n    } catch (err) {\n      console.error(\"Error fetching or creating conversation:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatOnline\",\n    children: onlinefriends.map(o => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatOnlineFriend\",\n      onClick: () => handleClick(o),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatOnlineImageContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"chatOnlineImage\",\n          src: o !== null && o !== void 0 && o.profilePicture ? o.profilePicture.startsWith(\"http\") ? o.profilePicture : PF + o.profilePicture : PF + \"person/noAvatar.png\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatOnlineBadge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chatOnlineName\",\n        children: o.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, o._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatOnline, \"SiM+q5PEu+4bs0I0Y7Hs+sjwF9I=\");\n_c = ChatOnline;\nvar _c;\n$RefreshReg$(_c, \"ChatOnline\");","map":{"version":3,"names":["useEffect","useState","axios","jsxDEV","_jsxDEV","ChatOnline","onlineUsers","currentId","setCurrentChat","_s","friends","setFriends","onlinefriends","setOnlineFriends","PF","process","env","REACT_APP_PUBLIC_FOLDER","console","error","getFriends","res","get","data","err","message","filter","f","includes","_id","handleClick","user","post","senderId","receiverId","className","children","map","o","onClick","src","profilePicture","startsWith","alt","fileName","_jsxFileName","lineNumber","columnNumber","username","_c","$RefreshReg$"],"sources":["D:/IntelliConnect/client/src/components/chatOnline/ChatOnline.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./chatOnline.css\";\r\nimport axios from \"axios\";\r\n\r\nexport default function ChatOnline({ onlineUsers, currentId, setCurrentChat }) {\r\n  const [friends, setFriends] = useState([]);\r\n  const [onlinefriends, setOnlineFriends] = useState([]);\r\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\r\n\r\n  useEffect(() => {\r\n    if (!currentId) {\r\n      console.error(\"currentId is undefined or null\");\r\n      return;\r\n    }\r\n\r\n    const getFriends = async () => {\r\n      try {\r\n        const res = await axios.get(\"/users/friends/\" + currentId);\r\n        setFriends(res.data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching friends:\", err.message);\r\n      }\r\n    };\r\n\r\n    getFriends();\r\n  }, [currentId]);\r\n\r\n  useEffect(() => {\r\n    setOnlineFriends(friends.filter((f) => onlineUsers.includes(f._id)));\r\n  }, [friends, onlineUsers]);\r\n\r\n  const handleClick = async (user) => {\r\n    try {\r\n      let res = await axios.get(`/conversations/find/${currentId}/${user._id}`);\r\n      \r\n      if (!res.data) {\r\n        // If no conversation exists, create a new one\r\n        res = await axios.post(\"/conversations\", {\r\n          senderId: currentId,\r\n          receiverId: user._id,\r\n        });\r\n      }\r\n  \r\n      setCurrentChat(res.data); // Set the conversation to the current chat\r\n    } catch (err) {\r\n      console.error(\"Error fetching or creating conversation:\", err);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"chatOnline\">\r\n      {onlinefriends.map((o) => (\r\n        <div className=\"chatOnlineFriend\" onClick={() => handleClick(o)} key={o._id}>\r\n          <div className=\"chatOnlineImageContainer\">\r\n            <img\r\n  className=\"chatOnlineImage\"\r\n  src={\r\n    o?.profilePicture\r\n      ? o.profilePicture.startsWith(\"http\")\r\n        ? o.profilePicture\r\n        : PF + o.profilePicture\r\n      : PF + \"person/noAvatar.png\"\r\n  }\r\n  alt=\"\"\r\n/>\r\n            <div className=\"chatOnlineBadge\"></div>\r\n          </div>\r\n          <span className=\"chatOnlineName\">{o.username}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}